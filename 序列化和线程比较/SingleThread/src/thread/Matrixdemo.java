//本来是想算个尽量大的，从1000算到6000，但是算到3000的时候等待的时间太长了，为了节省时间，
//所以，最后得到的比较结果图还是使用100到1000的数据

package thread;

import java.util.Date;

public class Matrixdemo{

	public static void main(String[] args) {
		// TODO 自动生成的方法存根
		int row=100 , column=100;//行和列            ,此处可做修改
	
		for(;row<=1000&column<=1000;row+=100,column+=100) {
		
		long begin=new Date().getTime();
		//System.out.println("开始了吗");
		int num;
		for(num=0;num<10;num++) {
			//long begin2=new Date().getTime();
			double[][] m1 = new double[row][column];
			//设置第一个矩阵
			for(int i = 0 ; i < row ; i++)
				for(int j = 0 ; j < column ; j++)
					m1[i][j] =(int)(Math.random()*100);
			GenericMatrix matrix1 = new GenericMatrix(m1);
			//设置第二个矩阵
			double[][] m2 = new double[row][column];
			for(int i = 0 ; i < row ; i++)
				for(int j = 0 ; j < column ; j++)
					m2[i][j] =(int)(Math.random()*100);
			GenericMatrix matrix2 = new GenericMatrix(m2);
			GenericMatrix matrix3 = matrix1.multiply(matrix2);
//			long end2=new Date().getTime();
//			System.out.print("两个"+row+"*"+column+"的矩阵相乘所花费的时间是：");
//			System.out.println(end2-begin2);
			//matrix3.printResult();
		}
		long end=new Date().getTime();
		System.out.print("1个线程计算维度是"+row+"的矩阵花费总时间是：");
		System.out.println(end-begin+"毫秒");
	}
}
}
